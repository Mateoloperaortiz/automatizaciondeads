# This is an example of your .env file format, which pnpm db:setup will create.
# Note: this must be .env, not .env.local, without further configuration changes.
POSTGRES_URL=postgresql://***
STRIPE_SECRET_KEY=sk_test_***
STRIPE_WEBHOOK_SECRET=whsec_***
BASE_URL=http://localhost:3000
AUTH_SECRET=***

# .env.example - Copy to .env and fill in your actual values
# This file should be committed to your repository. .env should be in .gitignore.

# --- Next.js / Application Specific ---
NEXT_PUBLIC_BASE_URL=http://localhost:3000
# NODE_ENV=development # Typically set by Vercel or your deployment environment (development, production, test)

# --- Database (Drizzle ORM & PostgreSQL - e.g., Supabase) ---
POSTGRES_URL="postgresql://user:password@host:port/database?sslmode=require"

# --- Authentication (Custom JWT setup) ---
# Used by lib/auth/session.ts for JWT signing and by middleware.ts
AUTH_SECRET="YOUR_VERY_STRONG_RANDOM_SECRET_FOR_JWTS_AT_LEAST_32_CHARS"
# If using NextAuth.js, it has its own set of variables like NEXTAUTH_URL, NEXTAUTH_SECRET, provider IDs/secrets.

# --- Security (Token Encryption) ---
# Used by lib/security/crypto.ts for encrypting platform access tokens
# Must be a 64-character hex string (32 bytes)
ENCRYPTION_KEY="YOUR_64_CHAR_HEX_ENCRYPTION_KEY_FOR_AES_256_GCM"

# --- Stripe Payments ---
STRIPE_SECRET_KEY="sk_test_YOUR_STRIPE_SECRET_KEY" # Or sk_live_... for production
STRIPE_PUBLIC_KEY="pk_test_YOUR_STRIPE_PUBLIC_KEY" # Or pk_live_...
STRIPE_WEBHOOK_SECRET="whsec_YOUR_STRIPE_WEBHOOK_SIGNING_SECRET"
# NEXT_PUBLIC_STRIPE_PRICE_ID_BASIC="price_xxxxxxxxxxxxxx" # If you have specific price IDs for UI
# NEXT_PUBLIC_STRIPE_PRICE_ID_PRO="price_yyyyyyyyyyyyyy"

# --- Meta (Facebook/Instagram) Integration ---
META_APP_ID="YOUR_META_APP_ID"
META_APP_SECRET="YOUR_META_APP_SECRET"
# META_REDIRECT_URI is constructed in code using NEXT_PUBLIC_BASE_URL + /api/auth/meta/callback
META_DEFAULT_PAGE_ID="YOUR_FACEBOOK_PAGE_ID_FOR_POSTING_ADS" # Used by meta_translator.ts

# --- X (Twitter) Ads Integration (Placeholders - X API is more complex) ---
# X_CONSUMER_KEY="YOUR_X_APP_CONSUMER_KEY"
# X_CONSUMER_SECRET="YOUR_X_APP_CONSUMER_SECRET"
# X_ACCESS_TOKEN="USER_SPECIFIC_X_ACCESS_TOKEN_FOR_ADS" # Often per-user
# X_ACCESS_TOKEN_SECRET="USER_SPECIFIC_X_ACCESS_TOKEN_SECRET_FOR_ADS" # Often per-user
# X_ADS_ACCOUNT_ID="YOUR_X_ADS_ACCOUNT_ID" # Often per-user/team
# X_FUNDING_INSTRUMENT_ID="YOUR_X_ADS_FUNDING_INSTRUMENT_ID" # Often per-user/team

# --- Google Ads Integration (Placeholders - Google Ads API is complex) ---
# GOOGLE_CLIENT_ID="YOUR_GOOGLE_OAUTH_CLIENT_ID"
# GOOGLE_CLIENT_SECRET="YOUR_GOOGLE_OAUTH_CLIENT_SECRET"
# GOOGLE_DEVELOPER_TOKEN="YOUR_GOOGLE_ADS_API_DEVELOPER_TOKEN"
# GOOGLE_LOGIN_CUSTOMER_ID="YOUR_MCC_LOGIN_CUSTOMER_ID_IF_APPLICABLE" # Manager Account ID if used for API calls
# GOOGLE_CUSTOMER_ID_FOR_AUTOMATION="SPECIFIC_GOOGLE_ADS_CUSTOMER_ID_TO_OPERATE_ON" # The Ad Account ID (often per-user/team)

# --- Python Audience Segmentation Service ---
# URL for the Python FastAPI service that provides audience segmentation
PYTHON_SEGMENTATION_SERVICE_URL=http://127.0.0.1:8000/segment # For local dev, ensure path includes /segment
# When true, API calls to advertising platforms are skipped and dummy IDs are returned
TEST_ACCOUNTS_ONLY=true

# --- Automation Engine / Cron Job ---
# Secret to protect the /api/automation/trigger endpoint
CRON_JOB_SECRET="YOUR_STRONG_RANDOM_SECRET_FOR_CRON_TRIGGER"

# --- Email Service (If you add email notifications, password resets etc.) ---
# EMAIL_SERVER_USER="your_email_smtp_username"
# EMAIL_SERVER_PASSWORD="your_email_smtp_password"
# EMAIL_SERVER_HOST="smtp.example.com"
# EMAIL_SERVER_PORT="587"
# EMAIL_FROM="Ads Automation <noreply@example.com>"

# --- Other Potential Variables ---\n# SENTRY_DSN=\"YOUR_SENTRY_DSN_FOR_ERROR_TRACKING\" # For error tracking\n# LOG_LEVEL=\"info\" # For controlling log verbosity