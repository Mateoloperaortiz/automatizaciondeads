---
description: 
globs: 
alwaysApply: true
---
# Project Structure Guide

This document provides an overview of the InspireAI project structure to help navigate the codebase.

## Main Directories

*   **`app/`**: Contains the core application logic, structured using Next.js App Router.
    *   **`(dashboard)/`**: Groups routes related to the user dashboard (e.g., `activity/`, `general/`, `security/`, `pricing/`). These are route groups and do not affect the URL path.
    *   **`(login)/`**: Groups routes related to authentication (e.g., `sign-in/`, `sign-up/`). These are route groups and do not affect the URL path.
    *   **`api/`**: Contains backend API endpoints.
        *   `stripe/`: Handles Stripe payment integration, including `checkout/` and `webhook/`.
        *   `team/`: API routes related to team management.
        *   `user/`: API routes related to user management.
*   **`components/`**: Contains reusable UI components.
    *   **`ui/`**: Likely contains UI primitives or shared components, potentially related to `[components.json](mdc:components.json)`.
*   **`lib/`**: Contains shared libraries and utility functions.
    *   **`auth/`**: Handles authentication logic. Refer to `[middleware.ts](mdc:middleware.ts)` for potential auth middleware.
    *   **`db/`**: Contains database-related code, including `migrations/`. Database configuration can be found in `[drizzle.config.ts](mdc:drizzle.config.ts)`.
    *   **`payments/`**: Contains logic related to payment processing, likely interacting with Stripe.

## Key Configuration Files

*   **`[.env](mdc:.env)` / `[.env.example](mdc:.env.example)`**: Environment variables.
*   **`[next.config.ts](mdc:next.config.ts)`**: Next.js configuration.
*   **`[drizzle.config.ts](mdc:drizzle.config.ts)`**: Drizzle ORM configuration.
*   **`[tsconfig.json](mdc:tsconfig.json)`**: TypeScript configuration.
*   **`[package.json](mdc:package.json)`**: Project dependencies and scripts.
*   **`[middleware.ts](mdc:middleware.ts)`**: Next.js middleware, often used for authentication and routing.
*   **`[components.json](mdc:components.json)`**: Potentially configuration for UI components (e.g., shadcn/ui).

## Routing

The application uses the Next.js App Router. Key points:
*   Directory-based routing within the `app/` folder.
*   Route groups like `(dashboard)` and `(login)` are used for organization and do not map to URL segments.
*   API routes are defined in `app/api/`.

## Authentication

Authentication logic is primarily located in `lib/auth/`. The `[middleware.ts](mdc:middleware.ts)` likely plays a role in protecting routes.

## Database

The project uses Drizzle ORM. Database schema, migrations, and query logic can be found in `lib/db/`. The configuration is in `[drizzle.config.ts](mdc:drizzle.config.ts)`.

## Payments

Payment processing, particularly with Stripe, is handled in `lib/payments/` and the API routes under `app/api/stripe/`.
