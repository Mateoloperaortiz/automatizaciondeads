\'use client\';\n\nimport { useEffect, useState, useActionState, startTransition } from \'react\';\nimport { useRouter } from \'next/navigation\';\nimport { Button } from \'@/components/ui/button\';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \'@/components/ui/card\';\nimport { Label } from \'@/components/ui/label\';\nimport { RadioGroup, RadioGroupItem } from \'@/components/ui/radio-group\';\nimport { Loader2, ArrowLeft } from \'lucide-react\';\nimport { finalizeMetaConnectionAction, IntegrationActionState } from \'../actions\'; // Path to the main integrations actions\nimport Cookies from \'js-cookie\'; // Using js-cookie for easier client-side cookie access if needed, though server action will read HttpOnly cookie.\n\ninterface AdAccount {\n  id: string;\n  name: string;\n}\n\ninterface TempConnectionData {\n  longLivedAccessToken: string;\n  tokenExpiresAt: string | null;\n  platformUserId?: string;\n  scopes: string | null;\n  adAccounts: AdAccount[];\n}\n\nconst initialFinalizeState: IntegrationActionState = {\n  error: null,\n  success: false,\n  message: null,\n  platform: \'meta\',\n};\n\nexport default function SelectMetaAccountPage() {\n  const router = useRouter();\n  const [tempData, setTempData] = useState<TempConnectionData | null>(null);\n  const [selectedAccountId, setSelectedAccountId] = useState<string | undefined>(undefined);\n  const [isLoadingPage, setIsLoadingPage] = useState(true);\n  const [cookieError, setCookieError] = useState<string | null>(null);\n\n  // Server action state\n  const [finalizeState, submitFinalizeAction, isFinalizing] = useActionState<IntegrationActionState, FormData>(\n    finalizeMetaConnectionAction,\n    initialFinalizeState\n  );\n\n  useEffect(() => {\n    // HttpOnly cookies cannot be directly read by client-side JS.\n    // This component will primarily serve as the UI for a form that posts to a server action.\n    // The server action will be responsible for reading the HttpOnly cookie.\n    // We can, however, check if a *non*-HttpOnly cookie was set as a flag, or just proceed.\n    // For this example, we\'ll assume the page loads and tries to get data if the user was redirected here.\n    // A simple way to pass non-sensitive info like \"number of accounts\" or a flag could be via query params from the callback.\n    // Or, the server action called by this page will handle cookie reading.\n    // For now, we\'ll fetch a client-side readable cookie if one was set (for testing purposes), \n    // but the real logic depends on the server action reading the HttpOnly one.\n\n    // Simulating that the page expects data; if user lands here without a redirect, it should show error.\n    // A robust way is to have the server action redirect here with a query param if the cookie was set.\n    // For now, just setting isLoadingPage to false to render the form.\n    // We will need to fetch the ad accounts to display them for selection.\n    // This info should have been passed from the callback.\n    // The server action `finalizeMetaConnectionAction` will actually read the HttpOnly cookie.\n    // This page needs to display the ad accounts. Let\'s assume the callback sets a *client-readable* cookie\n    // for the list of ad accounts (not ideal for tokens, but okay for names/IDs for selection).\n    // OR, better: the server action that redirects here could pass ad account names/IDs as query params or a flash message.\n\n    // **Revised Strategy**: This page will render a form. The form submission to `finalizeMetaConnectionAction`\n    // will be where the HttpOnly `meta_temp_connection` cookie is read and processed server-side.\n    // The client just needs to know to show this form. For displaying ad accounts, it\'s tricky without client-side JS reading them.\n    // The best approach is for the OAuth callback to redirect to this page with the ad accounts list embedded or fetched via a dedicated (safe) API endpoint.\n    // For simplicity in this step, we\'ll assume the server action will get everything it needs from the HttpOnly cookie.\n    // The form will just submit the selected account ID.\n    // To display choices: We MUST get the ad account list on the client. The temporary cookie is HttpOnly.\n    // Solution: The callback should set a *second*, non-HttpOnly cookie with just the adAccount list (names/IDs).\n\n    const adAccountsCookie = Cookies.get(\'meta_ad_accounts_list\'); // Assume callback sets this separately\n    if (adAccountsCookie) {\n      try {\n        const accounts = JSON.parse(adAccountsCookie);\n        setTempData({ adAccounts: accounts } as TempConnectionData); // Only set what\'s readable\n        if (accounts.length > 0) {\n          setSelectedAccountId(accounts[0].id);\n        }\n      } catch (e) {\n        setCookieError(\'Failed to parse ad account information.\');\n      }\n    }\ else {\n      // This means the user might have navigated here directly or cookie expired.\n      setCookieError(\'Ad account selection data not found. Please try connecting Meta again.\');\n    }\n    setIsLoadingPage(false);\n\n  }, []);\n\n  useEffect(() => {\n    if (finalizeState.success) {\n      alert(finalizeState.message || \'Meta account connected successfully!\');\n      Cookies.remove(\'meta_ad_accounts_list\'); // Clean up client-side list cookie\n      router.push(\'/dashboard/settings/integrations\');\n    } else if (finalizeState.error) {\n      alert(`Error: ${finalizeState.error}`);\n    }\n  }, [finalizeState, router]);\n\n  if (isLoadingPage) {\n    return <div className=\"flex justify-center items-center h-64\"><Loader2 className=\"h-8 w-8 animate-spin text-orange-500\" /> <p className=\'ml-2\'>Loading...</p></div>;\n  }\n\n  if (cookieError || !tempData || tempData.adAccounts.length === 0) {\n    return (\n      <section className=\"flex-1 p-4 lg:p-8\">\n        <div className=\"flex items-center mb-6\">\n          <Link href=\"/dashboard/settings/integrations\" className=\"mr-4 p-2 rounded-full hover:bg-gray-200\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Link>\n          <h1 className=\"text-lg lg:text-2xl font-medium\">Connect Meta Ad Account</h1>\n        </div>\n        <Card className=\"max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle>Error</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-red-500\">{cookieError || \'No ad accounts available for selection or data is missing.\'}</p>\n            <p className=\"mt-2 text-sm\">Please try <Link href=\"/dashboard/settings/integrations\" className=\"underline text-blue-600\">connecting your Meta account</Link> again.</p>\n          </CardContent>\n        </Card>\n      </section>\n    );\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!selectedAccountId) {\n        alert(\"Please select an ad account.\");\n        return;\n    }\n    const formData = new FormData();\n    formData.append(\'selectedAccountId\', selectedAccountId);\n    startTransition(() => {\n        submitFinalizeAction(formData);\n    });\n  };\n\n  return (\n    <section className=\"flex-1 p-4 lg:p-8\">\n      <div className=\"flex items-center mb-6\">\n         {/* No back arrow here, user should complete or explicitly cancel via integrations page */}\n        <h1 className=\"text-lg lg:text-2xl font-medium\">Select Meta Ad Account</h1>\n      </div>\n      <form onSubmit={handleSubmit} className=\"max-w-md mx-auto\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Choose Ad Account</CardTitle>\n            <CardDescription>Select the Meta Ad Account you want to use for posting jobs.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <RadioGroup value={selectedAccountId} onValueChange={setSelectedAccountId} name=\"selectedAccountId\">\n              {tempData.adAccounts.map((account) => (\n                <div key={account.id} className=\"flex items-center space-x-2 border p-3 rounded-md\">\n                  <RadioGroupItem value={account.id} id={`acc-${account.id}`} />\n                  <Label htmlFor={`acc-${account.id}`} className=\"flex-1 cursor-pointer\">\n                    <span className=\"font-medium\">{account.name}</span>\n                    <span className=\"block text-xs text-gray-500\">ID: {account.id}</span>\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\
            {finalizeState.error && (\n              <p className=\"text-sm text-red-500\">{finalizeState.error}</p>\n            )}\
            <Button type=\"submit\" className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\" disabled={isFinalizing || !selectedAccountId}>\
              {isFinalizing ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\
              Connect this Ad Account\
            </Button>\
            <Button type=\"button\" variant=\"outline\" className=\"w-full mt-2\" onClick={() => router.push(\'/dashboard/settings/integrations\') } disabled={isFinalizing}>\
                Cancel and go back\
            </Button>\
          </CardContent>\
        </Card>\
      </form>\
    </section>\
  );\
}\n 